// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  isAdmin     Boolean  @default(false)
  isVerified  Boolean  @default(false)
  documentType String?
  documentNumber String?
  country     String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  locations   UserLocation[]
  messages    Message[]
  chatMembers ChatMember[]
  
  @@map("users")
}

model UserLocation {
  id        String   @id @default(cuid())
  userId    String
  latitude  Float
  longitude Float
  accuracy  Float?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_locations")
}

model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  country     String
  city        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  members     ChatMember[]
  messages    Message[]
  
  @@map("chat_rooms")
}

model ChatMember {
  id        String   @id @default(cuid())
  userId    String
  chatRoomId String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  isActive  Boolean  @default(true)
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chatRoomId])
  @@map("chat_members")
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  chatRoomId String
  content   String
  messageType String @default("text") // text, image, location, system
  metadata  String? // JSON para datos adicionales
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model EmergencyContact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  phone     String
  relation  String? // familia, amiga, emergencia
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("emergency_contacts")
}

model SafetyReport {
  id          String   @id @default(cuid())
  userId      String
  location    String // JSON con lat, lng
  description String
  severity    String // low, medium, high, critical
  status      String @default("pending") // pending, reviewed, resolved
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("safety_reports")
}

